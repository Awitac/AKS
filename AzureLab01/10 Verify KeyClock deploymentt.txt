# checklist to verify Keycloak deployment

# Apply Keycloak YAML
kubectl apply -f keycloak-deployment.yml

# Check Deployment Status
kubectl get deployment keycloak

# Check Pod Status
kubectl get pods -l app=keycloak

# Check Service Status
kubectl get service keycloak

# Access Keycloak UI
# Use a web browser and navigate to the appropriate URL: http://<ClusterIP>:8080
# Log in with admin credentials: username 'admin', password 'changeme'

# Review Environment Variables
# Verify environment variables in keycloak-deployment.yml

# Verify Connectivity to PostgreSQL
# Check Keycloak logs for PostgreSQL connection errors

# Review Logs and Errors
kubectl logs -l app=keycloak

# Scaling (if needed)
# Scale Keycloak deployment replicas as necessary

# Security Review
# Ensure secure passwords and secrets handling

# Backup and Recovery Plan
# Develop a backup and recovery strategy

# Cleanup (if needed)
# Remove unused resources after testing

======================================================================================================================================================================
# You can restart the Keycloak service by deleting the corresponding pods, which will trigger the deployment controller to create new pods. Here's how you can do it:

# List the pods that are part of the Keycloak deployment:
  kubectl get pods -l app=keycloak

# Delete the pods:
  kubectl delete pods -l app=keycloak

# Kubernetes will automatically recreate the pods based on the deployment configuration, effectively restarting the Keycloak service.

# Please note that deleting pods will cause a temporary disruption to your Keycloak service while the new pods are being created. If you have multiple replicas in your Keycloak deployment, the disruption will be minimal as the remaining pods will continue serving requests.
